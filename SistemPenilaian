#include <iostream>
#include <fstream>
#include <iomanip>
#include <sstream>
#include <string>
#include <vector>
#include <limits>
#include <algorithm>
#include <cctype>
using namespace std;

class SistemPenilaian {
private:
    string nama;
    int sks;
    double kehadiran;
    double nilaiTugas;
    double nilaiUTS;
    double nilaiUAS;

public:
    SistemPenilaian() : nama(""), sks(0), kehadiran(0), nilaiTugas(0), nilaiUTS(0), nilaiUAS(0) {}

    void inputData() {
        cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Bersihkan buffer input
        cout << "Masukkan Nama Mahasiswa: ";
        getline(cin, nama);

        while (true) {
            cout << "Masukkan SKS Mata Kuliah (2/3): ";
            cin >> sks;
            if (cin.fail() || (sks != 2 && sks != 3)) {
                cout << "Error: SKS hanya boleh 2 atau 3. Silakan coba lagi.\n";
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
            } else {
                break;
            }
        }

        cout << "Masukkan Jumlah Kehadiran: ";
        cin >> kehadiran;

        cout << "Masukkan Nilai Tugas: ";
        cin >> nilaiTugas;

        cout << "Masukkan Nilai UTS: ";
        cin >> nilaiUTS;

        cout << "Masukkan Nilai UAS: ";
        cin >> nilaiUAS;

        if (cin.fail()) {
            cout << "Error: Input nilai tidak valid. Silakan ulangi input data.\n";
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
        }
    }

    double hitungPersenKehadiran() const {
        int pertemuanTotal = (sks == 2) ? 14 : 21;
        return (kehadiran / pertemuanTotal) * 100;
    }

    string tentukanGrade() const {
        if (nilaiTugas == 0 || nilaiUTS == 0 || nilaiUAS == 0 || kehadiran == 0) {
            return "E";
        }

        double persenKehadiran = hitungPersenKehadiran();
        if (persenKehadiran < 50) return "E";
        if (persenKehadiran < 75) return "D";

        double nilaiAkhir = (nilaiTugas * 0.2) +
                            (nilaiUTS * 0.3) +
                            (nilaiUAS * 0.4) +
                            (persenKehadiran * 0.1);

        if (nilaiAkhir >= 85) return "A";
        if (nilaiAkhir >= 75) return "B";
        if (nilaiAkhir >= 65) return "C";
        if (nilaiAkhir >= 55) return "D";
        return "E";
    }

    void tampilkanHasil() const {
        cout << "\n--- Hasil Penilaian ---\n";
        cout << "Nama Mahasiswa: " << nama << endl;
        cout << "SKS: " << sks << endl;
        cout << "Kehadiran: " << kehadiran << " pertemuan\n";
        cout << "Persentase Kehadiran: " << fixed << setprecision(2) << hitungPersenKehadiran() << "%\n";
        cout << "Nilai Tugas: " << nilaiTugas << endl;
        cout << "Nilai UTS: " << nilaiUTS << endl;
        cout << "Nilai UAS: " << nilaiUAS << endl;
        cout << "Grade Akhir: " << tentukanGrade() << endl;
    }

    void simpanKeFile() const {
        ofstream file("database.txt", ios::app);
        if (file.is_open()) {
            file << nama << "," << sks << "," << kehadiran << ","
                 << nilaiTugas << "," << nilaiUTS << "," << nilaiUAS << ","
                 << tentukanGrade() << "\n";
            file.close();
            cout << "Data berhasil disimpan ke database.\n";
        } else {
            cout << "Error: Tidak dapat membuka file.\n";
        }
    }

    static void bacaDariFile() {
        ifstream file("database.txt");
        if (!file.is_open()) {
            cout << "Error: File database tidak ditemukan atau tidak dapat dibuka.\n";
            return;
        }

        string line;
        if (file.peek() == ifstream::traits_type::eof()) {
            cout << "Database kosong.\n";
            return;
        }

        cout << "\n--- Data Mahasiswa dari Database ---\n";
        cout << left << setw(20) << "Nama"
             << setw(5) << "SKS"
             << setw(10) << "Kehadiran"
             << setw(10) << "Tugas"
             << setw(10) << "UTS"
             << setw(10) << "UAS"
             << setw(5) << "Grade" << endl;
        cout << string(70, '-') << endl;

        while (getline(file, line)) {
            stringstream ss(line);
            string nama, sks, kehadiran, tugas, uts, uas, grade;
            getline(ss, nama, ',');
            getline(ss, sks, ',');
            getline(ss, kehadiran, ',');
            getline(ss, tugas, ',');
            getline(ss, uts, ',');
            getline(ss, uas, ',');
            getline(ss, grade, ',');

            cout << left << setw(20) << nama
                 << setw(5) << sks
                 << setw(10) << kehadiran
                 << setw(10) << tugas
                 << setw(10) << uts
                 << setw(10) << uas
                 << setw(5) << grade << endl;
        }
        file.close();
    }

    static void urutkanDataDescending() {
        ifstream inputFile("database.txt");
        if (!inputFile.is_open()) {
            cout << "Error: File database tidak ditemukan atau tidak dapat dibuka.\n";
            return;
        }

        vector<vector<string> > records;
        string line;

        while (getline(inputFile, line)) {
            stringstream ss(line);
            vector<string> record;
            string item;

            while (getline(ss, item, ',')) {
                record.push_back(item);
            }
            records.push_back(record);
        }
        inputFile.close();

        sort(records.begin(), records.end(), [](const vector<string>& a, const vector<string>& b) {
            string gradeOrder = "ABCDE";
            return gradeOrder.find(a.back()) < gradeOrder.find(b.back());
        });

        ofstream outputFile("database.txt");
        if (!outputFile.is_open()) {
            cout << "Error: Tidak dapat membuka file untuk menulis.\n";
            return;
        }

        for (const auto& record : records) {
            for (size_t i = 0; i < record.size(); ++i) {
                outputFile << record[i];
                if (i < record.size() - 1) outputFile << ",";
            }
            outputFile << "\n";
        }
        outputFile.close();

        cout << "Data berhasil diurutkan secara berdasarkan Grade.\n";
    }

    static void hapusData() {
        string namaHapus;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        cout << "Masukkan nama mahasiswa yang ingin dihapus: ";
        getline(cin, namaHapus);

        ifstream inputFile("database.txt");
        if (!inputFile.is_open()) {
            cout << "Error: File database tidak ditemukan atau tidak dapat dibuka.\n";
            return;
        }

        ofstream tempFile("temp_database.txt");
        if (!tempFile.is_open()) {
            cout << "Error: Tidak dapat membuat file sementara.\n";
            inputFile.close();
            return;
        }

        string line;
        bool dataDitemukan = false;

        while (getline(inputFile, line)) {
            stringstream ss(line);
            string nama;
            getline(ss, nama, ',');

            if (nama != namaHapus) {
                tempFile << line << "\n";
            } else {
                dataDitemukan = true;
            }
        }

        inputFile.close();
        tempFile.close();

        if (remove("database.txt") != 0) {
            cout << "Error: Tidak dapat menghapus file database.\n";
            return;
        }

        if (rename("temp_database.txt", "database.txt") != 0) {
            cout << "Error: Tidak dapat mengganti file sementara menjadi database.\n";
            return;
        }

        if (dataDitemukan) {
            cout << "Data mahasiswa berhasil dihapus.\n";
        } else {
            cout << "Data mahasiswa tidak ditemukan.\n";
        }
    }
};

int main() {
    SistemPenilaian mahasiswa;
    int pilihan;

    do {
        cout << "\n--- Menu Sistem Penilaian ---\n";
        cout << "1. Input Data Mahasiswa\n";
        cout << "2. Lihat Data dari Database\n";
        cout << "3. Urutkan Data Berdasarkan Grade\n";
        cout << "4. Hapus Data Mahasiswa\n";
        cout << "5. Keluar\n";
        cout << "Pilih opsi (1/2/3/4/5): ";
        cin >> pilihan;

        if (cin.fail()) {
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cout << "Input tidak valid. Masukkan angka 1-5.\n";
            continue;
        }

        switch (pilihan) {
        case 1:
            mahasiswa.inputData();
            mahasiswa.tampilkanHasil();
            mahasiswa.simpanKeFile();
            break;
        case 2:
            SistemPenilaian::bacaDariFile();
            break;
        case 3:
            SistemPenilaian::urutkanDataDescending();
            break;
        case 4:
            SistemPenilaian::hapusData();
            break;
        case 5:
            cout << "Keluar dari program.\n";
            break;
        default:
            cout << "Pilihan tidak valid. Silakan coba lagi.\n";
        }
    } while (pilihan != 5);

    return 0;
}

